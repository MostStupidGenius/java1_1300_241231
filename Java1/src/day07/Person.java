package day07;

//import java.util.Scanner;

public class Person {
//	클래스 만들기
//	해당 클래스 바로 안쪽의 공간을
//	필드(field)라고 부르며
//	이곳에서 선언한 변수, 상수를 속성, 멤버변수 등으로 부른다.
	String name; // 각 객체마다 만들어지는 변수를
//	멤버 변수라고 하며, 그러한 변수 이름은 모든 객체가
//	클래스의 필드에 있는 변수명을 따라간다.
//	이러한 멤버 변수는 초기화를 하지 않아도 된다.
	int age;
	String gender;
	String TV;
	
	public static void main(String[] args) {
//		클래스를 사용하여 객체 생성하기
		Person hong = new Person();
		
//		객체의 정보를 삽입하는 코드
//		객체가 담긴 변수 뒤에 마침표.를 쓰면
//		그 객체의 속성이나 기능, 정보에 접근할 수 있다.
//		이때, 이 마침표.를 하위 요소 접근자라고 한다.
		hong.name = "홍길동";
		hong.age = 20;
		hong.gender = "M";
		
//		System.out.println(hong.name);
		
//		일반 변수와 참조 변수
//		일반 변수는 원시자료형을 담고 있는 변수로
//		원시자료형이란 int, float, boolean과 같이
//		소문자로 되어 있는 자료형을 의미한다.
		int num = 3; // 3
//		다른 변수에 num을 사용해 값을 담으면
		int num2 = num; // 3
		
//		값을 전달했던 num의 값을 변경해도
		num += 2; // num == 5
		
//		num의 값을 전달했던 것이지
//		num을 담았던 것이 아니기 때문에
//		기존의 num을 사용했던 당시의 값인
//		3이 num2에 담겨 있다.
		System.out.println(num2); // 3
		
//		※참조변수
//		new를 사용해 새로 만들어진 객체의 주소값을
//		담고 있는 변수로, 값을 담는 것이 아니라
//		주소값, 즉 해당 값이 위치한 장소를 가리키는 값을
//		가지고 있다.
		Person 철수네집 = new Person();
//		철수네집의 TV는 LG다.
		철수네집.TV = "LG";
		
//		그런데 철수네집을 철수엄마네집으로 부르기도 한다.
		Person 철수엄마네집 = 철수네집;
//		철수 엄마가 TV를 삼성으로 바꿨다.
		철수엄마네집.TV = "삼성";
		
//		그랬더니 철수네집에 갔더니
//		그 집의 TV가 삼성이 되어 있었다.
		System.out.println(철수네집.TV); // 삼성
		
		
//		정리
//		주소값이란 하나의 객체(대상)을 가리키는 값으로
//		참조변수로 저장하여 해당 객체의 정보에 접근할 수 있다.
//		이때 서로 다른 참조 변수가 같은 주소값을 가지고 있다면
//		이를 "같은 객체를 참조하고 있다."라고 표현한다.
//		같은 객체를 참조하는 경우, 그 속성을 변경, 접근했을 때
//		같은 값을 바라보게 된다.
		
		
	}

}
